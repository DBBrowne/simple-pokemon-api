# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - aws

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: 029929660699.dkr.ecr.eu-west-2.amazonaws.com/
  ECS_SERVICE: poke-fargate-balanced
  ECS_CLUSTER: poke-fargate
  CONTAINER_TAGS: "pokemon-front pokemon-back"
  

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - run: npm test

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build with docker-compose, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker compose -f ./docker-compose.prod.yml up --build --no-start    
          for tag in ${{ env.CONTAINER_TAGS }}; do
            docker push ${{ ECR_REPOSITORY }}$tag
          done

      - name: Re-deploy via AWS service
        run:
          aws ecs update-service --cluster {{ ECS_CLUSTER }} --service {{ ECS_SERVICE }} --region {{ AWS_REGION }} --force-new-deployment
